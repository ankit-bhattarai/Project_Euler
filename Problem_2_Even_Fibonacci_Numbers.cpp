#include <iostream>

/*
Problem Statement:

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.

One method to solve this is to use brute force which will scale as O(N)
 */

int brute_force(int N){
    // This is the most basic brute force, that doesn't consider any tricks for even numbers
    int fib_1 = 1;
    int fib_2 = 2;
    int next_fib;
    int sum = 0;
    while (fib_1 <= N){
        /* Careful consideration has to be done using edge cases to ensure that during the iteration, no fibonacci
         * numbers greater than N are added for large N and also to ensure that for small N, the second fibonacci number
         * is also not excluded
         * At each stage the loop only continues and fib_1 is only added to the sum if it is less than or equal to N
         */
        // At each step, the next fibonacci number is evaluated using the previous two
        next_fib = fib_1 + fib_2;
        // If the first fibonacci number is even, it will be added to the sum
        if (fib_1 % 2 == 0){
            sum += fib_1;
        }
        // Moving one to the right
        fib_1 = fib_2;
        fib_2 = next_fib;
        // fib_2  becomes fib_1 and their sum becomes fib_2
        // If fib_2 was greater than N, after the cycle fib_1 becomes greater than N, meaning that it will automatically
        // end the loop
    }
    return sum;
}
int main(){
    int sum = brute_force(2);
    std::cout<<sum<<std::endl;
    return 0;
}
